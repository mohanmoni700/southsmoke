diff --git a/vendor/klaviyo/magento2-extension/Block/Catalog/Product/ViewedProduct.php b/vendor/klaviyo/magento2-extension/Block/Catalog/Product/ViewedProduct.php
index 879e6abe2..3f3726ca9 100644
--- a/vendor/klaviyo/magento2-extension/Block/Catalog/Product/ViewedProduct.php
+++ b/vendor/klaviyo/magento2-extension/Block/Catalog/Product/ViewedProduct.php
@@ -23,6 +23,11 @@ class ViewedProduct extends Template
      */
     private $imageHelper;
 
+    /**
+     * @var \Magento\Catalog\Api\ProductRepositoryInterface
+     */
+    protected $productRepository;
+
     /**
      * ViewedProduct constructor.
      * @param Context $context
@@ -31,6 +36,7 @@ class ViewedProduct extends Template
      * @param CategoryFactory $categoryFactory
      * @param Image $imageHelper
      * @param array $data
+     * @param \Magento\Catalog\Api\ProductRepositoryInterface $productRepository
      */
     public function __construct(
         Context $context,
@@ -38,6 +44,7 @@ class ViewedProduct extends Template
         Registry $registry,
         CategoryFactory $categoryFactory,
         Image $imageHelper,
+        \Magento\Catalog\Api\ProductRepositoryInterface $productRepository,
         array $data = []
     ) {
         parent::__construct($context, $data);
@@ -45,6 +52,7 @@ class ViewedProduct extends Template
         $this->_registry = $registry;
         $this->_categoryFactory = $categoryFactory;
         $this->imageHelper = $imageHelper;
+        $this->productRepository = $productRepository;
     }
 
     /**
@@ -122,7 +130,17 @@ class ViewedProduct extends Template
             $this->price = $_product->getPrice();
             if ($_product->getTypeId() == 'grouped') {
                 # if on a grouped product page, use the price of the lowest priced item in the group
-                $associatedProducts = $_product->getTypeInstance()->getAssociatedProducts($_product);
+                $productIds = $_product->getTypeInstance()->getChildrenIds($_product->getId());
+                $associatedProducts = [];
+                if ($productIds) {
+                    foreach ($productIds as $productId) {
+                        $ids = array_keys($productId);
+                        foreach ($ids as $id) {
+                            $associatedProducts[] = $this->productRepository->getById($id);
+                        }
+                    }
+                }
+
                 foreach ($associatedProducts as $associatedProduct) {
                     $associatedItemPrice = $associatedProduct->getPrice();
                     if ($this->price == 0) {
diff --git a/vendor/magento/module-grouped-product/Block/Adminhtml/Product/Composite/Fieldset/Grouped.php b/vendor/magento/module-grouped-product/Block/Adminhtml/Product/Composite/Fieldset/Grouped.php
index 8a4e1894c..91e9a6527 100644
--- a/vendor/magento/module-grouped-product/Block/Adminhtml/Product/Composite/Fieldset/Grouped.php
+++ b/vendor/magento/module-grouped-product/Block/Adminhtml/Product/Composite/Fieldset/Grouped.php
@@ -32,12 +32,14 @@ class Grouped extends \Magento\GroupedProduct\Block\Product\View\Type\Grouped
         \Magento\Catalog\Block\Product\Context $context,
         \Magento\Framework\Stdlib\ArrayUtils $arrayUtils,
         \Magento\Framework\Pricing\Helper\Data $pricingHelper,
+        \Magento\Catalog\Api\ProductRepositoryInterface $productRepository,
         array $data = []
     ) {
         $this->pricingHelper = $pricingHelper;
         parent::__construct(
             $context,
             $arrayUtils,
+            $productRepository,
             $data
         );
     }
diff --git a/vendor/magento/module-grouped-product/Block/Product/View/Type/Grouped.php b/vendor/magento/module-grouped-product/Block/Product/View/Type/Grouped.php
index 23aa8b01e..5375b9892 100644
--- a/vendor/magento/module-grouped-product/Block/Product/View/Type/Grouped.php
+++ b/vendor/magento/module-grouped-product/Block/Product/View/Type/Grouped.php
@@ -13,12 +13,39 @@ namespace Magento\GroupedProduct\Block\Product\View\Type;
  */
 class Grouped extends \Magento\Catalog\Block\Product\View\AbstractView
 {
+    /**
+     * @param \Magento\Catalog\Block\Product\Context $context
+     * @param \Magento\Framework\Stdlib\ArrayUtils $arrayUtils
+     * @param \Magento\Catalog\Api\ProductRepositoryInterface $productRepository
+     * @param array $data
+     */
+    public function __construct(
+        \Magento\Catalog\Block\Product\Context $context,
+        \Magento\Framework\Stdlib\ArrayUtils $arrayUtils,
+        \Magento\Catalog\Api\ProductRepositoryInterface $productRepository,
+        array $data = []
+    )
+    {
+        $this->productRepository = $productRepository;
+        parent::__construct($context, $arrayUtils, $data);
+    }
+
     /**
      * @return array
      */
     public function getAssociatedProducts()
     {
-        return $this->getProduct()->getTypeInstance()->getAssociatedProducts($this->getProduct());
+        $productIds = $this->getProduct()->getTypeInstance()->getChildrenIds($this->getProduct()->getId());
+        $associatedProducts = [];
+        if ($productIds) {
+            foreach ($productIds as $productId) {
+                $ids = array_keys($productId);
+                foreach ($ids as $id) {
+                    $associatedProducts[] = $this->productRepository->getById($id);
+                }
+            }
+        }
+        return $associatedProducts;
     }
 
     /**
diff --git a/vendor/magento/module-grouped-product/Pricing/Price/FinalPrice.php b/vendor/magento/module-grouped-product/Pricing/Price/FinalPrice.php
index 0ad0ae89f..98c1aad1f 100644
--- a/vendor/magento/module-grouped-product/Pricing/Price/FinalPrice.php
+++ b/vendor/magento/module-grouped-product/Pricing/Price/FinalPrice.php
@@ -24,6 +24,35 @@ class FinalPrice extends \Magento\Catalog\Pricing\Price\FinalPrice implements Fi
      */
     protected $minProduct;
 
+    /**
+     * @var float
+     */
+    protected $quantity;
+
+    /**
+     * @var ProductRepositoryInterface
+     */
+    protected $productRepository;
+
+    /**
+     * @param \Magento\Framework\Pricing\SaleableInterface $saleableItem
+     * @param float $quantity
+     * @param \Magento\Framework\Pricing\Adjustment\CalculatorInterface $calculator
+     * @param \Magento\Framework\Pricing\PriceCurrencyInterface $priceCurrency
+     * @param \Magento\Catalog\Api\ProductRepositoryInterface $productRepository
+     */
+    public function __construct(
+        \Magento\Framework\Pricing\SaleableInterface $saleableItem,
+                                                     $quantity,
+        \Magento\Framework\Pricing\Adjustment\CalculatorInterface $calculator,
+        \Magento\Framework\Pricing\PriceCurrencyInterface $priceCurrency,
+        \Magento\Catalog\Api\ProductRepositoryInterface $productRepository
+    )
+    {
+        parent::__construct($saleableItem, $quantity, $calculator, $priceCurrency);
+        $this->productRepository = $productRepository;
+    }
+
     /**
      * Return minimal product price
      *
@@ -45,17 +74,26 @@ class FinalPrice extends \Magento\Catalog\Pricing\Price\FinalPrice implements Fi
     public function getMinProduct()
     {
         if (null === $this->minProduct) {
-            $products = $this->product->getTypeInstance()->getAssociatedProducts($this->product);
-            $minPrice = null;
-            foreach ($products as $item) {
-                $product = clone $item;
-                $product->setQty(\Magento\Framework\Pricing\PriceInfoInterface::PRODUCT_QUANTITY_DEFAULT);
-                $price = $product->getPriceInfo()
-                    ->getPrice(FinalPrice::PRICE_CODE)
-                    ->getValue();
-                if (($price !== false) && ($price <= ($minPrice === null ? $price : $minPrice))) {
-                    $this->minProduct = $product;
-                    $minPrice = $price;
+            $productIds = $this->product->getTypeInstance()->getChildrenIds($this->product->getId());
+            $products = [];
+            if ($productIds) {
+                foreach ($productIds as $productId) {
+                    $ids = array_keys($productId);
+                    foreach ($ids as $id) {
+                        $products[] = $this->productRepository->getById($id);
+                    }
+                }
+                $minPrice = null;
+                foreach ($products as $item) {
+                    $product = clone $item;
+                    $product->setQty(\Magento\Framework\Pricing\PriceInfoInterface::PRODUCT_QUANTITY_DEFAULT);
+                    $price = $product->getPriceInfo()
+                        ->getPrice(FinalPrice::PRICE_CODE)
+                        ->getValue();
+                    if (($price !== false) && ($price <= ($minPrice === null ? $price : $minPrice))) {
+                        $this->minProduct = $product;
+                        $minPrice = $price;
+                    }
                 }
             }
         }
